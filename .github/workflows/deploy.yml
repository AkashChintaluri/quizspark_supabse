name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"  # Using the existing instance's IP
  EC2_INSTANCE_ID: "i-0158b19cc85a4e542"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t quizspark-backend .
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp quizspark-backend.tar.gz deployment/
        cp appspec.yml deployment/
        cp scripts/* deployment/
        cd deployment
        zip -r ../deployment.zip .

    - name: Upload to S3
      run: |
        aws s3 cp deployment.zip s3://quizspark-deployments/deployment.zip

    - name: Deploy to EC2
      run: |
        # Create temporary directory on EC2
        aws ssm send-command \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["mkdir -p /tmp/quizspark-deploy"]'

        # Copy deployment package from S3 to EC2
        aws s3 cp s3://quizspark-deployments/deployment.zip s3://quizspark-deployments/deployment.zip
        aws ssm send-command \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /tmp/quizspark-deploy",
            "aws s3 cp s3://quizspark-deployments/deployment.zip .",
            "unzip deployment.zip",
            "chmod +x before_install.sh after_install.sh start.sh",
            "./before_install.sh",
            "./after_install.sh",
            "./start.sh"
          ]'

    - name: Verify Deployment
      run: |
        # Set timeout to 5 minutes
        timeout=300
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          
          if [ $elapsed_time -gt $timeout ]; then
            echo "Timeout reached after 5 minutes"
            echo "Checking container status..."
            aws ssm send-command \
              --instance-ids ${{ env.EC2_INSTANCE_ID }} \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "docker ps -a",
                "docker logs quizzespark-backend"
              ]'
            exit 1
          fi
          
          # Check if container is running
          container_status=$(aws ssm send-command \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["docker ps -q --filter name=quizzespark-backend"]' \
            --query 'Command.CommandId' \
            --output text)
          
          if [ -n "$container_status" ]; then
            echo "Container is running, checking application health..."
            if curl -s http://${{ env.EC2_DNS }}:3000; then
              echo "Application is responding!"
              break
            else
              echo "Container is running but application is not responding yet..."
              # Get container logs
              aws ssm send-command \
                --instance-ids ${{ env.EC2_INSTANCE_ID }} \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=["docker logs quizzespark-backend --tail 50"]'
            fi
          else
            echo "Container is not running, checking deployment logs..."
            aws ssm send-command \
              --instance-ids ${{ env.EC2_INSTANCE_ID }} \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "ls -la /tmp/quizspark-deploy",
                "cat /tmp/quizspark-deploy/start.sh"
              ]'
          fi
          
          sleep 10
        done

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"
