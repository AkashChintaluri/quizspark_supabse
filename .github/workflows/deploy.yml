name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"
  EC2_INSTANCE_ID: "i-0158b19cc85a4e542"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t quizspark-backend .
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp quizspark-backend.tar.gz deployment/
        cp appspec.yml deployment/
        cp scripts/* deployment/
        cd deployment
        zip -r ../deployment.zip .

    - name: Upload to S3
      run: |
        aws s3 cp deployment.zip s3://quizspark-deployments/deployment.zip

    - name: Configure CodeDeploy Role
      run: |
        # Create CodeDeploy role if it doesn't exist
        if ! aws iam get-role --role-name quizspark-codedeploy-role 2>/dev/null; then
          echo "Creating CodeDeploy role..."
          aws iam create-role \
            --role-name quizspark-codedeploy-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "codedeploy.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          # Attach necessary policies
          aws iam attach-role-policy \
            --role-name quizspark-codedeploy-role \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        else
          echo "CodeDeploy role already exists"
        fi

    - name: Create Deployment
      run: |
        # Get the role ARN
        ROLE_ARN=$(aws iam get-role --role-name quizspark-codedeploy-role --query 'Role.Arn' --output text)
        
        # Create or get the deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name quizspark-backend \
          --deployment-group-name quizspark-production \
          --s3-location bucket=quizspark-deployments,bundleType=zip,key=deployment.zip \
          --service-role-arn $ROLE_ARN \
          --query 'deploymentId' \
          --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        
        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        aws deploy wait deployment-successful \
          --deployment-id $DEPLOYMENT_ID
        
        echo "Deployment completed successfully"

    - name: Verify Deployment
      run: |
        # Set timeout to 5 minutes
        timeout=300
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          
          if [ $elapsed_time -gt $timeout ]; then
            echo "Timeout reached after 5 minutes"
            exit 1
          fi
          
          if curl -s http://${{ env.EC2_DNS }}:3000; then
            echo "Application is responding!"
            break
          else
            echo "Waiting for application to be ready..."
            sleep 10
          fi
        done

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"
