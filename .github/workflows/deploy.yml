name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"
  EC2_INSTANCE_ID: "i-0158b19cc85a4e542"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t quizspark-backend .
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp quizspark-backend.tar.gz deployment/
        cp appspec.yml deployment/
        cp scripts/* deployment/
        cd deployment
        zip -r ../deployment.zip .

    - name: Upload to S3
      run: |
        aws s3 cp deployment.zip s3://quizspark-deployments/deployment.zip

    - name: Configure IAM Role
      run: |
        # Get the instance profile ARN
        INSTANCE_PROFILE=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].IamInstanceProfile.Arn' \
          --output text)
        
        # Extract the role name from the instance profile ARN
        ROLE_NAME=$(echo $INSTANCE_PROFILE | cut -d'/' -f2)
        
        # Attach CodeDeploy policy to the existing role
        aws iam attach-role-policy \
          --role-name $ROLE_NAME \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

    - name: Create Deployment
      run: |
        # Create or get the deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name quizspark-backend \
          --deployment-group-name quizspark-production \
          --s3-location bucket=quizspark-deployments,bundleType=zip,key=deployment.zip \
          --query 'deploymentId' \
          --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        
        # Wait for deployment to complete with detailed status
        echo "Waiting for deployment to complete..."
        while true; do
          # Get deployment status
          DEPLOYMENT_STATUS=$(aws deploy get-deployment \
            --deployment-id $DEPLOYMENT_ID \
            --query 'deploymentInfo.status' \
            --output text)
          
          echo "Current deployment status: $DEPLOYMENT_STATUS"
          
          # Get deployment instance status
          INSTANCE_STATUS=$(aws deploy list-deployment-instances \
            --deployment-id $DEPLOYMENT_ID \
            --query 'instancesList[0].status' \
            --output text)
          
          echo "Instance status: $INSTANCE_STATUS"
          
          # Get deployment logs
          if [ "$INSTANCE_STATUS" = "Failed" ]; then
            echo "Deployment failed. Checking logs..."
            aws deploy get-deployment-instance \
              --deployment-id $DEPLOYMENT_ID \
              --instance-id ${{ env.EC2_INSTANCE_ID }} \
              --query 'instanceSummary.lifecycleEvents[].diagnostics' \
              --output text
            exit 1
          fi
          
          if [ "$DEPLOYMENT_STATUS" = "Succeeded" ]; then
            echo "Deployment completed successfully"
            break
          elif [ "$DEPLOYMENT_STATUS" = "Failed" ] || [ "$DEPLOYMENT_STATUS" = "Stopped" ]; then
            echo "Deployment failed or was stopped"
            echo "Checking deployment details..."
            aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
            exit 1
          fi
          
          sleep 30
        done

    - name: Verify Deployment
      run: |
        # Set timeout to 5 minutes
        timeout=300
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          
          if [ $elapsed_time -gt $timeout ]; then
            echo "Timeout reached after 5 minutes"
            exit 1
          fi
          
          if curl -s http://${{ env.EC2_DNS }}:3000; then
            echo "Application is responding!"
            break
          else
            echo "Waiting for application to be ready..."
            sleep 10
          fi
        done

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"
