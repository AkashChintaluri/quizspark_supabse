name: Deploy Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0' # Weekly scan

env:
  AWS_REGION: ap-south-1
  EC2_IP: ec2-3-110-27-110.ap-south-1.compute.amazonaws.com
  EC2_IP_NUMERIC: 3.110.27.110
  DNS: quizspark.s3-website.ap-south-1.amazonaws.com
  ECR_REPOSITORY: quizspark
  S3_BUCKET: quizspark

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
        config: |
          name: "Enhanced Security Configuration"
          disable-default-queries: false
          paths:
            - src/
            - server/
            - public/
          paths-ignore:
            - node_modules/
            - dist/
            - .git/
            - .github/
          query-filters:
            - exclude:
                problem.severity: warning
            - include:
                problem.severity: error
            - include:
                problem.severity: critical
          security-severity:
            - critical
            - high
            - medium
          security-categories:
            - injection
            - authentication
            - authorization
            - cryptography
            - data-exposure
            - deserialization
            - xss
            - csrf
            - sql-injection
            - command-injection

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Security Checks
      run: |
        # Update critical dependencies
        npm install react-router@latest react-router-dom@latest
        npm install vite@latest
        
        # Run security checks
        echo "Running npm audit..."
        npm audit || true
        
        echo "Running npm audit fix..."
        npm audit fix || true
        
        echo "Checking for outdated packages..."
        npm outdated || true
        
        echo "Security checks completed"

  deploy-backend:
    needs: codeql-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
          ls -la ~/.ssh/
          cat ~/.ssh/id_ed25519

      - name: Create ECR repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << EOF
            # Set environment variables
            export AWS_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export GITHUB_SHA=${{ github.sha }}
            
            # Check disk space
            echo "Checking disk space..."
            df -h
            du -sh /var/lib/docker/*
            
            # Clean up Docker resources
            echo "Cleaning up Docker resources..."
            docker system prune -a -f --volumes
            
            # Login to ECR
            aws ecr get-login-password --region \${AWS_REGION} | docker login --username AWS --password-stdin \${ECR_REGISTRY}
            
            # Pull the latest image
            docker pull \${ECR_REGISTRY}/\${ECR_REPOSITORY}:\${GITHUB_SHA}
            
            # Stop all running containers
            echo "Stopping all containers..."
            docker stop \$(docker ps -q) || true
            
            # Remove all containers
            echo "Removing all containers..."
            docker rm \$(docker ps -a -q) || true
            
            # Start new container
            echo "Starting new container..."
            docker run -d \
              --name quizspark-backend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              --restart unless-stopped \
              \${ECR_REGISTRY}/\${ECR_REPOSITORY}:\${GITHUB_SHA}
            
            # Verify container is running
            echo "Verifying container status..."
            sleep 5
            if docker ps | grep -q quizspark-backend; then
              echo "Container started successfully"
            else
              echo "Container failed to start"
              docker logs quizspark-backend || true
              exit 1
            fi
          EOF

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/
          aws s3 website s3://${{ env.S3_BUCKET }} --index-document index.html --error-document index.html

  setup-monitoring:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
          ls -la ~/.ssh/
          cat ~/.ssh/id_ed25519

      - name: Create monitoring configs
        run: |
          # Create monitoring directory
          mkdir -p monitoring

          # Create Prometheus config for cAdvisor
          cat > monitoring/prometheus.yml << EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
            retention: 30d
            scrape_timeout: 10s

          scrape_configs:
            - job_name: 'cadvisor'
              static_configs:
                - targets: ['${{ env.EC2_IP_NUMERIC }}:8080']
              metrics_path: '/metrics'
              scrape_interval: 10s
              scheme: https
              tls_config:
                cert_file: /etc/prometheus/certs/cert.pem
                key_file: /etc/prometheus/certs/key.pem

            - job_name: 'prometheus'
              static_configs:
                - targets: ['${{ env.EC2_IP_NUMERIC }}:9090']
              scrape_interval: 15s
              scheme: https
              tls_config:
                cert_file: /etc/prometheus/certs/cert.pem
                key_file: /etc/prometheus/certs/key.pem

            - job_name: 'blackbox'
              metrics_path: /probe
              params:
                module: [http_2xx]
              static_configs:
                - targets:
                  - https://quizspark.s3-website.ap-south-1.amazonaws.com
                  - https://${{ env.EC2_IP_NUMERIC }}:3000
              relabel_configs:
                - source_labels: [__address__]
                  target_label: __param_target
                - source_labels: [__param_target]
                  target_label: instance
                - target_label: __address__
                  replacement: ${{ env.EC2_IP_NUMERIC }}:9115
          EOF

      - name: Deploy monitoring stack
        run: |
          # SSH into EC2 and setup monitoring
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << EOF
            # Stop any existing containers
            docker-compose -f ~/monitoring/docker-compose.yml down || true

            # Install Docker Compose if not present
            sudo apt-get update
            sudo apt-get install -y docker-compose

            # Create monitoring directory
            mkdir -p ~/monitoring

            # Create docker-compose.yml for monitoring stack
            cat > ~/monitoring/docker-compose.yml << "EOL"
            version: "3"
            services:
              prometheus:
                image: prom/prometheus:latest
                ports:
                  - "9090:9090"
                volumes:
                  - ./prometheus.yml:/etc/prometheus/prometheus.yml
                  - prometheus-data:/prometheus
                command:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--storage.tsdb.path=/prometheus"
                  - "--storage.tsdb.retention.time=30d"
                restart: always
                network_mode: "host"

              cadvisor:
                image: gcr.io/cadvisor/cadvisor:latest
                ports:
                  - "8080:8080"
                volumes:
                  - /:/rootfs:ro
                  - /var/run:/var/run:ro
                  - /sys:/sys:ro
                  - /var/lib/docker/:/var/lib/docker:ro
                  - /dev/disk/:/dev/disk:ro
                devices:
                  - /dev/kmsg:/dev/kmsg
                restart: always
                privileged: true
                network_mode: "host"

              blackbox-exporter:
                image: prom/blackbox-exporter:latest
                ports:
                  - "9115:9115"
                restart: always
                network_mode: "host"

            volumes:
              prometheus-data:
            EOL

            # Copy monitoring configs
            scp -i ~/.ssh/id_ed25519 monitoring/prometheus.yml ubuntu@${{ env.EC2_IP }}:~/monitoring/

            # Start monitoring stack
            cd ~/monitoring
            docker-compose up -d

            # Wait for services to start
            sleep 30

            # Check if services are running
            docker ps
            curl -f https://${{ env.EC2_IP_NUMERIC }}:9090/-/healthy
            curl -f https://${{ env.EC2_IP_NUMERIC }}:8080/metrics
            curl -f https://${{ env.EC2_IP_NUMERIC }}:9115/metrics
          EOF

      - name: Verify monitoring setup
        run: |
          sleep 60
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} '
            # Fix dpkg error
            sudo dpkg --configure -a
            
            # List all containers to see their names
            echo "All running containers:"
            docker ps -a
            
            # Check if ports are open using ss
            sudo apt-get update
            sudo apt-get install -y iproute2
            sudo ss -tulpn | grep 9090
            sudo ss -tulpn | grep 8080
            sudo ss -tulpn | grep 9115
            
            # Check service logs
            PROMETHEUS_CONTAINER=$(docker ps -a | grep prometheus | head -n 1 | awk "{print \$1}")
            CADVISOR_CONTAINER=$(docker ps -a | grep cadvisor | head -n 1 | awk "{print \$1}")
            BLACKBOX_CONTAINER=$(docker ps -a | grep blackbox-exporter | head -n 1 | awk "{print \$1}")
            
            if [ ! -z "$PROMETHEUS_CONTAINER" ]; then
              echo "Prometheus logs:"
              docker logs $PROMETHEUS_CONTAINER
            fi
            
            if [ ! -z "$CADVISOR_CONTAINER" ]; then
              echo "cAdvisor logs:"
              docker logs $CADVISOR_CONTAINER
            fi
          '

        


        