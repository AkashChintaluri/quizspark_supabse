name: Simple Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t quizspark-backend .
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz

    - name: Deploy to EC2
      run: |
        # Create SSH key from secret
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        
        # Copy Docker image to EC2
        scp -o StrictHostKeyChecking=no -i key.pem quizspark-backend.tar.gz ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
        
        # SSH into EC2 and run deployment commands
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.EC2_IP }} << 'EOF'
          # Stop and remove existing container if it exists
          docker stop quizspark-backend || true
          docker rm quizspark-backend || true
          
          # Load the new image
          docker load < /home/ubuntu/quizspark-backend.tar.gz
          
          # Run the container
          docker run -d \
            --name quizspark-backend \
            -p 3000:3000 \
            -e SUPABASE_URL=$SUPABASE_URL \
            -e SUPABASE_KEY=$SUPABASE_KEY \
            quizspark-backend
        EOF

    - name: Verify Deployment
      run: |
        # Wait for application to be ready
        timeout=300
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          
          if [ $elapsed_time -gt $timeout ]; then
            echo "Timeout reached after 5 minutes"
            exit 1
          fi
          
          if curl -s http://${{ env.EC2_DNS }}:3000; then
            echo "Application is responding!"
            break
          else
            echo "Waiting for application to be ready..."
            sleep 10
          fi
        done

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"
