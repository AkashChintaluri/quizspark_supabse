name: ECR Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"
  ECR_REPOSITORY: "quizspark-backend"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to EC2
      run: |
        # Create SSH key from secret
        printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        if [ ! -s key.pem ]; then
          echo "Error: SSH key file is empty or not created"
          exit 1
        fi

        # SSH into EC2 and run deployment commands
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.EC2_IP }} << EOF
          # Login to ECR
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Stop and remove existing container
          docker stop quizspark-backend || true
          docker rm quizspark-backend || true
          
          # Remove existing image
          docker rmi quizspark-backend || true
          
          # Pull and run new image
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker run -d \
            --name quizspark-backend \
            --restart unless-stopped \
            -p 3000:3000 \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Verify container is running
          if ! docker ps | grep -q quizspark-backend; then
            echo "Error: Container failed to start"
            docker logs quizspark-backend
            exit 1
          fi
          
          # Check container logs
          echo "Container logs:"
          docker logs quizspark-backend
        EOF
        
        # Clean up local files
        rm -f key.pem

    - name: Verify Deployment
      run: |
        sleep 10
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_DNS }}:3000/api/upcoming-quizzes/1)
        if [ "$response" != "200" ]; then
          echo "Error: Application is not responding correctly"
          exit 1
        fi

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"