name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"  # Using the existing instance's IP
  EC2_INSTANCE_ID: "i-0158b19cc85a4e542"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t quizspark-backend .
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz

    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp quizspark-backend.tar.gz deployment/
        cp appspec.yml deployment/
        cp scripts/* deployment/
        cd deployment
        zip -r ../deployment.zip .

    - name: Upload to S3
      run: |
        aws s3 cp deployment.zip s3://quizspark-deployments/deployment.zip

    - name: Check and Create CodeDeploy Application
      run: |
        # Check if application exists
        if ! aws deploy get-application --application-name quizspark-backend 2>/dev/null; then
          echo "Creating CodeDeploy application..."
          aws deploy create-application --application-name quizspark-backend
          
          echo "Creating deployment group..."
          aws deploy create-deployment-group \
            --application-name quizspark-backend \
            --deployment-group-name quizspark-production \
            --ec2-tag-filters Key=Name,Value=quizspark-backend,Type=KEY_AND_VALUE \
            --service-role-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/CodeDeployServiceRole
        else
          echo "CodeDeploy application already exists"
        fi

    - name: Verify EC2 Instance State
      run: |
        echo "Checking EC2 instance state..."
        INSTANCE_STATE=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].State.Name' \
          --output text)
        
        echo "Instance state: $INSTANCE_STATE"
        
        if [ "$INSTANCE_STATE" != "running" ]; then
          echo "Error: Instance is not in running state. Current state: $INSTANCE_STATE"
          exit 1
        fi
        
        # Check if instance has SSM role
        echo "Checking instance IAM role..."
        INSTANCE_ROLE=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].IamInstanceProfile.Arn' \
          --output text)
        
        if [ -z "$INSTANCE_ROLE" ]; then
          echo "Error: Instance does not have an IAM role attached"
          exit 1
        fi
        
        echo "Instance IAM role: $INSTANCE_ROLE"

        # Check VPC and security group settings
        echo "Checking VPC and security group settings..."
        VPC_ID=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].VpcId' \
          --output text)
        
        echo "VPC ID: $VPC_ID"
        
        # Check if VPC has internet gateway
        IGW_ID=$(aws ec2 describe-internet-gateways \
          --filters "Name=attachment.vpc-id,Values=$VPC_ID" \
          --query 'InternetGateways[0].InternetGatewayId' \
          --output text)
        
        if [ -z "$IGW_ID" ] || [ "$IGW_ID" == "None" ]; then
          echo "Warning: VPC does not have an internet gateway attached"
        else
          echo "Internet Gateway ID: $IGW_ID"
        fi
        
        # Check security group rules
        SG_ID=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' \
          --output text)
        
        echo "Security Group ID: $SG_ID"
        
        # Check outbound rules
        echo "Checking security group outbound rules..."
        aws ec2 describe-security-group-rules \
          --filters "Name=group-id,Values=$SG_ID" \
          --query 'SecurityGroupRules[?IsEgress==`true`].[IpProtocol,FromPort,ToPort,CidrIpv4]' \
          --output table

    - name: Check and Install SSM Agent
      run: |
        # First, check if instance is ready for SSM
        echo "Checking if instance is ready for SSM..."
        aws ec2 describe-instance-status \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --query 'InstanceStatuses[0].InstanceStatus.Status' \
          --output text
        
        # Wait for instance to be ready
        echo "Waiting for instance to be ready..."
        aws ec2 wait instance-status-ok --instance-ids ${{ env.EC2_INSTANCE_ID }}
        
        # Restart SSM agent to ensure proper registration
        echo "Restarting SSM agent..."
        aws ssm send-command \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "sudo systemctl stop amazon-ssm-agent",
            "sudo systemctl start amazon-ssm-agent",
            "sudo systemctl status amazon-ssm-agent"
          ]' \
          --timeout-seconds 600
        
        echo "Waiting for SSM agent to restart..."
        sleep 30
        
        # Check SSM agent registration
        echo "Checking SSM agent registration..."
        aws ssm describe-instance-information \
          --filters "Key=InstanceIds,Values=${{ env.EC2_INSTANCE_ID }}" \
          --query 'InstanceInformationList[0].[PingStatus,LastPingDateTime]' \
          --output text
        
        # Wait for agent to be fully registered
        echo "Waiting for agent to be fully registered..."
        sleep 30

    - name: Check and Install CodeDeploy Agent
      run: |
        # Check if agent is running using SSM
        if ! aws ssm send-command \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["systemctl is-active codedeploy-agent"]' \
          --query 'Command.Status' \
          --output text 2>/dev/null | grep -q "Success"; then
          
          echo "Installing CodeDeploy agent..."
          
          # Install dependencies and CodeDeploy agent using SSM
          aws ssm send-command \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo apt-get update",
              "sudo apt-get install -y ruby",
              "sudo apt-get install -y wget",
              "cd /home/ubuntu",
              "wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install",
              "chmod +x ./install",
              "sudo ./install auto",
              "sudo service codedeploy-agent start"
            ]'
          
          echo "Waiting for agent installation..."
          sleep 30
        else
          echo "CodeDeploy agent is already installed and running"
        fi

    - name: Check for Active Deployment
      id: check_deployment
      run: |
        # Get the most recent deployment
        DEPLOYMENTS=$(aws deploy list-deployments \
          --application-name quizspark-backend \
          --deployment-group-name quizspark-production \
          --max-items 1 \
          --query 'deployments' \
          --output json)
        
        # Check if deployments array is empty
        if [ "$DEPLOYMENTS" = "[]" ]; then
          echo "No deployments found"
          exit 0
        fi
        
        # Extract deployment ID from JSON
        DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | jq -r '.[0]')
        
        if [ -n "$DEPLOYMENT_ID" ]; then
          # Check if the deployment is still in progress
          DEPLOYMENT_STATUS=$(aws deploy get-deployment \
            --deployment-id $DEPLOYMENT_ID \
            --query 'deploymentInfo.status' \
            --output text)
          
          if [ "$DEPLOYMENT_STATUS" = "InProgress" ]; then
            echo "Found active deployment: $DEPLOYMENT_ID"
            echo "Waiting for it to complete..."
            aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
            echo "Previous deployment completed"
          else
            echo "No active deployment found (last deployment status: $DEPLOYMENT_STATUS)"
          fi
        else
          echo "No deployments found"
        fi

    - name: Deploy using CodeDeploy
      id: deploy
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name quizspark-backend \
          --deployment-group-name quizspark-production \
          --s3-location bucket=quizspark-deployments,bundleType=zip,key=deployment.zip \
          --query 'deploymentId' \
          --output text)
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment ${{ steps.deploy.outputs.deployment_id }} to complete..."
        # Set a timeout of 10 minutes
        timeout=600
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          
          if [ $elapsed_time -gt $timeout ]; then
            echo "Deployment timeout reached after 10 minutes"
            echo "Checking deployment status and details..."
            echo "=== Deployment Overview ==="
            aws deploy get-deployment --deployment-id ${{ steps.deploy.outputs.deployment_id }}
            echo "=== Deployment Instance Status ==="
            aws deploy list-deployment-instances --deployment-id ${{ steps.deploy.outputs.deployment_id }} --query 'instancesList[]' --output table
            echo "=== Deployment Logs ==="
            aws deploy get-deployment-instance --deployment-id ${{ steps.deploy.outputs.deployment_id }} --instance-id ${{ env.EC2_INSTANCE_ID }} --query 'instanceSummary.lifecycleEvents[].diagnostics' --output text
            exit 1
          fi
          
          status=$(aws deploy get-deployment \
            --deployment-id ${{ steps.deploy.outputs.deployment_id }} \
            --query 'deploymentInfo.status' \
            --output text)
            
          echo "Current deployment status: $status"
          
          # Get deployment instance status
          instance_status=$(aws deploy list-deployment-instances \
            --deployment-id ${{ steps.deploy.outputs.deployment_id }} \
            --query 'instancesList[0].status' \
            --output text)
          echo "Instance status: $instance_status"
          
          if [ "$status" = "Succeeded" ]; then
            echo "Deployment completed successfully"
            break
          elif [ "$status" = "Failed" ] || [ "$status" = "Stopped" ]; then
            echo "Deployment failed or was stopped"
            echo "Checking deployment details..."
            aws deploy get-deployment --deployment-id ${{ steps.deploy.outputs.deployment_id }}
            echo "=== Deployment Instance Status ==="
            aws deploy list-deployment-instances --deployment-id ${{ steps.deploy.outputs.deployment_id }} --query 'instancesList[]' --output table
            echo "=== Deployment Logs ==="
            aws deploy get-deployment-instance --deployment-id ${{ steps.deploy.outputs.deployment_id }} --instance-id ${{ env.EC2_INSTANCE_ID }} --query 'instanceSummary.lifecycleEvents[].diagnostics' --output text
            exit 1
          fi
          
          sleep 30
        done

    - name: Verify Deployment
      run: |
        until curl -s http://${{ env.EC2_DNS }}:3000; do
          echo "Waiting for application to be ready..."
          sleep 5
        done

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"
