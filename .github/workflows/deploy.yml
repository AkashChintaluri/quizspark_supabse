name: Simple Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: "13.127.72.180"
  EC2_DNS: "ec2-13-127-72-180.ap-south-1.compute.amazonaws.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        # Clean up any existing containers and images
        docker system prune -f
        
        # Build the new image
        docker build -t quizspark-backend .
        
        # Save the image
        docker save quizspark-backend | gzip > quizspark-backend.tar.gz
        
        # Verify the image was created
        if [ ! -f quizspark-backend.tar.gz ]; then
          echo "Error: Docker image was not created"
          exit 1
        fi

    - name: Deploy to EC2
      run: |
        # Create SSH key from secret
        printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        if [ ! -s key.pem ]; then
          echo "Error: SSH key file is empty or not created"
          exit 1
        fi
        
        # Copy Docker image to EC2
        scp -o StrictHostKeyChecking=no -i key.pem quizspark-backend.tar.gz ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
        
        # SSH into EC2 and run deployment commands
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ env.EC2_IP }} << 'EOF'
          # Stop and remove existing container
          docker stop quizspark-backend || true
          docker rm quizspark-backend || true
          
          # Remove existing image
          docker rmi quizspark-backend || true
          
          # Load new image
          docker load < /home/ubuntu/quizspark-backend.tar.gz
          
          # Run new container
          docker run -d \
            --name quizspark-backend \
            --restart unless-stopped \
            -p 3000:3000 \
            quizspark-backend
            
          # Clean up the tar.gz file
          rm -f /home/ubuntu/quizspark-backend.tar.gz
          
          # Wait for container to start
          sleep 10
          
          # Verify container is running
          if ! docker ps | grep -q quizspark-backend; then
            echo "Error: Container failed to start"
            docker logs quizspark-backend
            exit 1
          fi
          
          # Check container logs
          echo "Container logs:"
          docker logs quizspark-backend
          
          # Verify the fix is deployed
          if docker exec quizspark-backend cat /app/server/supabaseServer.js | grep -q "event"; then
            echo "Error: The fix was not properly deployed"
            exit 1
          fi
        EOF
        
        # Clean up local files
        rm -f key.pem quizspark-backend.tar.gz

    - name: Verify Deployment
      run: |
        # Wait for the application to be ready
        sleep 30
        
        # Test the endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_DNS }}:3000/api/upcoming-quizzes/1)
        if [ "$response" != "200" ]; then
          echo "Error: Application is not responding correctly"
          exit 1
        fi

    - name: Output Deployment URL
      run: |
        echo "Backend deployed at: http://${{ env.EC2_DNS }}:3000"