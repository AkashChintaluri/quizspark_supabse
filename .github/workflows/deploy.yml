name: Deploy Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  EC2_IP: ec2-13-127-72-180.ap-south-1.compute.amazonaws.com
  EC2_IP_NUMERIC: 13.127.72.180
  DNS: quizspark.s3-website.ap-south-1.amazonaws.com
  ECR_REPOSITORY: quizspark
  S3_BUCKET: quizspark

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  setup-monitoring:
    needs: codeql-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Create monitoring configs
        run: |
          # Create monitoring directory
          mkdir -p monitoring

          # Create Prometheus config
          cat > monitoring/prometheus.yml << EOF
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
            retention: 15d

          scrape_configs:
            - job_name: 'quizspark-backend'
              static_configs:
                - targets: ['${{ env.EC2_IP_NUMERIC }}:3000']
              metrics_path: '/metrics'
              scrape_interval: 10s

            - job_name: 'node-exporter'
              static_configs:
                - targets: ['${{ env.EC2_IP_NUMERIC }}:9100']
              scrape_interval: 15s

            - job_name: 'prometheus'
              static_configs:
                - targets: ['${{ env.EC2_IP_NUMERIC }}:9090']
              scrape_interval: 15s

          rule_files:
            - 'alert.rules'

          alerting:
            alertmanagers:
              - static_configs:
                  - targets: ['${{ env.EC2_IP_NUMERIC }}:9093']
          EOF

          # Create alert rules
          cat > monitoring/alert.rules << EOF
          groups:
            - name: quizspark
              rules:
                - alert: HighCPUUsage
                  expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode='idle'}[5m])) * 100) > 80
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: High CPU usage detected
                    description: CPU usage is above 80% for 5 minutes

                - alert: HighMemoryUsage
                  expr: 100 * (1 - ((node_memory_MemAvailable_bytes or node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes)) > 85
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: High memory usage detected
                    description: Memory usage is above 85% for 5 minutes

                - alert: HighErrorRate
                  expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
                  for: 5m
                  labels:
                    severity: critical
                  annotations:
                    summary: High error rate detected
                    description: Error rate is above 5% for 5 minutes
          EOF

      - name: Deploy monitoring stack
        run: |
          # SSH into EC2 and setup monitoring
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} '
            # Stop any existing containers
            docker-compose -f ~/monitoring/docker-compose.yml down || true

            # Install Docker Compose if not present
            sudo apt-get update
            sudo apt-get install -y docker-compose

            # Create monitoring directory
            mkdir -p ~/monitoring

            # Create docker-compose.yml for monitoring stack
            cat > ~/monitoring/docker-compose.yml << "EOL"
            version: "3"
            services:
              prometheus:
                image: prom/prometheus:latest
                ports:
                  - "9090:9090"
                volumes:
                  - ./prometheus.yml:/etc/prometheus/prometheus.yml
                  - ./alert.rules:/etc/prometheus/alert.rules
                  - prometheus-data:/prometheus
                command:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--storage.tsdb.path=/prometheus"
                  - "--storage.tsdb.retention.time=15d"
                restart: always
                network_mode: "host"

              node-exporter:
                image: prom/node-exporter:latest
                ports:
                  - "9100:9100"
                restart: always
                network_mode: "host"

            volumes:
              prometheus-data:
            EOL

            # Copy monitoring configs
            scp -i ~/.ssh/id_ed25519 monitoring/prometheus.yml ubuntu@${{ env.EC2_IP }}:~/monitoring/
            scp -i ~/.ssh/id_ed25519 monitoring/alert.rules ubuntu@${{ env.EC2_IP }}:~/monitoring/

            # Start monitoring stack
            cd ~/monitoring
            docker-compose up -d

            # Wait for services to start
            sleep 30

            # Check if services are running
            docker ps
            curl -f http://localhost:9090/-/healthy
            curl -f http://localhost:9100/metrics
          '

      - name: Verify monitoring setup
        run: |
          sleep 60
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} '
            # Fix dpkg error
            sudo dpkg --configure -a
            
            # List all containers to see their names
            echo "All running containers:"
            docker ps -a
            
            # Check if ports are open using ss
            sudo apt-get update
            sudo apt-get install -y iproute2
            sudo ss -tulpn | grep 9090
            sudo ss -tulpn | grep 9100
            
            # Check service logs using the first container that matches the pattern
            PROMETHEUS_CONTAINER=$(docker ps -a | grep prometheus | head -n 1 | awk "{print \$1}")
            NODE_EXPORTER_CONTAINER=$(docker ps -a | grep node-exporter | head -n 1 | awk "{print \$1}")
            
            if [ ! -z "$PROMETHEUS_CONTAINER" ]; then
              echo "Prometheus logs:"
              docker logs $PROMETHEUS_CONTAINER
            else
              echo "No Prometheus container found"
            fi
            
            if [ ! -z "$NODE_EXPORTER_CONTAINER" ]; then
              echo "Node Exporter logs:"
              docker logs $NODE_EXPORTER_CONTAINER
            else
              echo "No Node Exporter container found"
            fi
          '

  deploy-backend:
    needs: setup-monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-scanning-configuration scanOnPush=true \
            --image-tag-mutability MUTABLE

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} '
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            docker stop $(docker ps -q) || true
            docker rm $(docker ps -a -q) || true
            docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          '

      - name: Verify backend deployment
        run: |
          sleep 30
          curl -f http://${{ env.EC2_IP }}:3000/health || exit 1

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Configure S3 bucket
        run: |
          aws s3api put-bucket-website \
            --bucket ${{ env.S3_BUCKET }} \
            --website-configuration '{"IndexDocument": {"Suffix": "index.html"}, "ErrorDocument": {"Key": "index.html"}}'

          aws s3api put-bucket-cors \
            --bucket ${{ env.S3_BUCKET }} \
            --cors-configuration '{"CORSRules": [{"AllowedHeaders": ["*"], "AllowedMethods": ["GET", "HEAD"], "AllowedOrigins": ["*"], "ExposeHeaders": []}]}'

      - name: Upload to S3
        run: |
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "text/html; charset=utf-8" \
            --cache-control "no-cache" \
            --exclude "*.js" \
            --exclude "*.css" \
            --exclude "*.json" \
            --exclude "*.svg" \
            --exclude "*.png" \
            --exclude "*.jpg" \
            --exclude "*.jpeg" \
            --exclude "*.gif" \
            --exclude "*.ico" \
            --exclude "*.woff" \
            --exclude "*.woff2" \
            --exclude "*.ttf" \
            --exclude "*.eot"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "application/javascript" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.js"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "text/css" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.css"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "application/json" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.json"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "image/svg+xml" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.svg"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "image/png" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.png"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "image/jpeg" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.jpg" \
            --include "*.jpeg"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "image/gif" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.gif"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "image/x-icon" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.ico"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "font/woff" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.woff"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "font/woff2" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.woff2"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "font/ttf" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.ttf"

          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --content-type "application/vnd.ms-fontobject" \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.eot"

      - name: Output frontend URL
        run: echo "Frontend deployed to http://${{ env.DNS }}"

        


        